/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
//#include <dt-bindings/zmk/rgb.h>

#include "keypos_xbows_crystal.h"

#define OS_MAC   1
#define OS_WIN   2
#define OS_LINUX 3

#define TARGET_OS OS_MAC

#define WORKMAN_MAC 0
#define SYML        1 // Symbols
#define NAVL        2 // Navigation
#define MOUSL       3 // Mouse
#define NUML        4 // Numeric
#define FUNL        5 // Functions
#define NPADL       6 // Numpad
#define SYSL        7 // System/Settings

#if TARGET_OS == OS_MAC
#   define _C LG
#   define _QUIT _C(Q)
#   define _APP_NXT LG(TAB)
#   define _APP_PRV LS(LG(TAB))
#   define _WIN_NXT LG(GRAVE)
#   define _WIN_PRV LS(LG(GRAVE))
#else
#   define _C LC
#   define _QUIT LA(F4)
#   define _APP_NXT LA(TAB)
#   define _APP_PRV LS(LA(TAB))
#   define _WIN_NXT LC(TAB)
#   define _WIN_PRV LS(LC(TAB))
#endif

#define _CUT        _C(X)
#define _COPY       _C(C)
#define _PASTE      _C(V)
#define _UNDO       _C(Z)
#define _REDO       LS(_UNDO)
#define _SEL_ALL    _C(A)
#define _CLOSE      _C(W)
#define _LOCK_SCR   LC(LG(Q))

// &mt {
//     flavor = "tap-preferred";
//     quick-tap-ms = <200>;
// };

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    //require-prior-idle-ms = <150>;
};

#define KEYS_L      LN0 LN1 LN2 LN3 LN4 LN5 LN6 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left-hand keys
#define KEYS_R      RN0 RN1 RN2 RN3 RN4 RN5 RN6 RN7 RN8 RT0 RT1 RT2 RT3 RT4 RT5 RT6 RT7 RT8 RM0 RM1 RM2 RM3 RM4 RM5 RM6 RM7 RB0 RB1 RB2 RB3 RB4 RB5 RB6 // right-hand keys
#define THUMBS      CM0 CB0 LH4 LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3 RH4 RH5 RH6                                 // thumb keys

//
// ENABLE_MOUSE_KEYS activates support for mouse keys if defined; otherwise
// mouse keys are deactivated (they're transformed into no-ops) by default.
// To use this feature, uncomment the following line (remove leading "//").
//
#define ENABLE_MOUSE_KEYS

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2000
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 10
#include <dt-bindings/zmk/mouse.h>
#ifdef ENABLE_MOUSE_KEYS
    // ==== MOUSE-KEY <section begins> ====
    &mmv {
      delay-ms = <0>;
      acceleration-exponent = <2>;
      time-to-max-speed-ms = <500>;
    };
    &msc {
      delay-ms = <0>;
      acceleration-exponent = <0>;
      time-to-max-speed-ms = <300>;
    };
    // ==== MOUSE-KEY <section ends> =====
#else
    //#define mkp none
    #define mmv none
    #define msc none
    #undef  MOVE_UP
    #define MOVE_UP
    #undef  MOVE_DOWN
    #define MOVE_DOWN
    #undef  MOVE_LEFT
    #define MOVE_LEFT
    #undef  MOVE_RIGHT
    #define MOVE_RIGHT
    #undef  SCRL_UP
    #define SCRL_UP
    #undef  SCRL_DOWN
    #define SCRL_DOWN
    #undef  SCRL_LEFT
    #define SCRL_LEFT
    #undef  SCRL_RIGHT
    #define SCRL_RIGHT
#endif

/ {

    behaviors {

        // left-hand HRMs
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        // right-hand HRMs
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        // Layer hold tap: hold to momentarily switch to layer, press to toggle to layer
        lht: layer_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&to>;
        };

        // Layer hold none: hold to momentarily switch to layer, nothing on press
        lhn: layer_hold_none {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&none>;
        };

        // Shift / Capsword
        scw: shift_caps_word {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&caps_word>;
        };

        scwc: shift_caps_word_caps {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&scw LSHFT 0>, <&kp CAPSLOCK>;
        };

        // Tap-dance and layer tap: one tap outputs a key press, two taps switches to layer, tap and hold enables the layer temporarily
        tdl_nav_esc: tap_dance_layer_navigation_escape {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&lt NAVL ESC>, <&to NAVL>;
        };
        tdl_fun_esc: tap_dance_layer_func_escape {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&lt FUNL ESC>, <&to FUNL>;
        };
        tdn_fun: tap_dance_none_func {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&lhn FUNL 0>, <&to FUNL>;
        };
        tdn_nav: tap_dance_none_navigation {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&lhn NAVL 0>, <&to NAVL>;
        };
        tdn_num: tap_dance_none_numeric {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&lhn NUML 0>, <&to NUML>;
        };
        tdn_mouse: tap_dance_none_mouse {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&lhn MOUSL 0>, <&to MOUSL>;
        };
    };

#define CTL_a     &hml LCTRL A
#define CTL_EXCL  &hml LCTRL EXCL
#define GUI_s     &hml LGUI  S
#define GUI_STAR  &hml LGUI  STAR
#define ALT_h     &hml LALT  H
#define ALT_MINUS &hml LALT  MINUS
#define SHF_t     &hml LSHFT T
#define SHF_LPAR  &hml LSHFT LPAR
#define SHF_n     &hmr RSHFT N
#define SHF_RPAR  &hmr RSHFT RPAR
#define ALT_e     &hmr RALT  E
#define ALT_EQUAL &hmr RALT  EQUAL
#define GUI_o     &hmr RGUI  O
#define GUI_SQT   &hmr RGUI  SQT
#define CTL_i     &hmr RCTRL I
#define CTL_CARET &hmr RCTRL CARET

#define CTL_ESC   &hml LCTRL ESC
#define GUI_TAB   &hml LGUI  TAB
#define CTL_DEL   &hmr RCTRL DEL
#define GUI_RET   &hmr RGUI  RET

#define SH_CAPSW  &scw LSHFT 0

#define TO_0      &to WORKMAN_MAC
#define LHT(L)    &lht L L

    macros {
    };

//#define COMBO_PRIOR_IDLE_MS -1
#define COMBO_PRIOR_IDLE_MS 150
//#define COMBO_TIMEOUT_MS 50
#define COMBO_TIMEOUT_MS 10

    combos {
        compatible = "zmk,combos";
        combo_capslock { // G+Y -> Caps Lock
            bindings = <&kp CAPSLOCK>;
            key-positions = <LM0 RM0>;
            layers = <WORKMAN_MAC>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
            //timeout-ms = <COMBO_TIMEOUT_MS>;
        };
        // combo_numeric { // Del + Backspace -> Numbers Layer
        //     bindings = <&mo NUML>;
        //     key-positions = <LH2 LH1>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     //timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_navigation { // Backspace + Esc -> Navigation layer
        //     bindings = <&mo NAVL>;
        //     key-positions = <LH1 LH0>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     //timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        combo_numpad { // Enter + Space -> Numpad Layer
            bindings = <&mo NPADL>;
            key-positions = <RH0 RH1>;
            layers = <WORKMAN_MAC>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
            //timeout-ms = <COMBO_TIMEOUT_MS>;
        };
        // combo_func { // Space + Tab -> Function Layer
        //     bindings = <&mo FUNL>;
        //     key-positions = <RH1 RH2>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     //timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        combo_semicolon { // , + . -> ;
            bindings = <&kp SEMI>;
            key-positions = <RB2 RB3>;
            layers = <WORKMAN_MAC>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
            timeout-ms = <COMBO_TIMEOUT_MS>;
        };
        // combo_ctrl_q { // A + Q -> Ctrl+Q
        //     bindings = <&kp LC(W)>;
        //     key-positions = <LM4 LT4>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_ctrl_a { // A + S -> Ctrl+A
        //     bindings = <&kp LC(A)>;
        //     key-positions = <LM4 LM3>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_ctrl_z { // A + Z -> Ctrl+Z
        //     bindings = <&kp LC(Z)>;
        //     key-positions = <LM4 LB4>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_cmd_d { // S + D -> Cmd+D
        //     bindings = <&kp LG(D)>;
        //     key-positions = <LM3 LT3>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_cmd_s { // S + H -> Cmd+S
        //     bindings = <&kp LG(S)>;
        //     key-positions = <LM3 LM2>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_cmd_x { // S + X -> Cmd+X
        //     bindings = <&kp LG(X)>;
        //     key-positions = <LM3 LB3>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_alt_r { // H + R -> Alt+R
        //     bindings = <&kp LA(R)>;
        //     key-positions = <LM2 LT2>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_alt_h { // H + T -> Alt+H
        //     bindings = <&kp LA(H)>;
        //     key-positions = <LM2 LM1>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_alt_m { // H + M -> Alt+M
        //     bindings = <&kp LA(M)>;
        //     key-positions = <LM2 LB2>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_shft_w { // T + W -> Shift+W
        //     bindings = <&kp LS(W)>;
        //     key-positions = <LM1 LT1>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_shft_t { // T + G -> Shift+T
        //     bindings = <&kp LS(T)>;
        //     key-positions = <LM1 LM0>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_shft_c { // T + C -> Shift+C
        //     bindings = <&kp LS(C)>;
        //     key-positions = <LM1 LB1>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_shft_f { // N + F -> Shift+F
        //     bindings = <&kp LS(F)>;
        //     key-positions = <RM1 RT1>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_shft_n { // N + Y -> Shift+N
        //     bindings = <&kp LS(N)>;
        //     key-positions = <RM1 RM0>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_shft_l { // N + L -> Shift+L
        //     bindings = <&kp LS(L)>;
        //     key-positions = <RM1 RB1>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_alt_u { // E + U -> Alt+U
        //     bindings = <&kp LA(U)>;
        //     key-positions = <RM2 RT2>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_alt_e { // E + N -> Alt+E
        //     bindings = <&kp LA(E)>;
        //     key-positions = <RM2 RM1>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_alt_comma { // E + , -> Alt+,
        //     bindings = <&kp LA(COMMA)>;
        //     key-positions = <RM2 RB2>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_cmd_p { // O + P -> Cmd+P
        //     bindings = <&kp LG(P)>;
        //     key-positions = <RM3 RT3>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_cmd_o { // O + E -> Cmd+O
        //     bindings = <&kp LG(O)>;
        //     key-positions = <RM3 RM2>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_cmd_dot { // O + DOT -> Cmd+.
        //     bindings = <&kp LG(DOT)>;
        //     key-positions = <RM3 RB3>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_ctrl_semi { // I + ; -> Ctrl+;
        //     bindings = <&kp LC(SEMI)>;
        //     key-positions = <RM4 RT4>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_ctrl_i { // I + O -> Ctrl+I
        //     bindings = <&kp LC(I)>;
        //     key-positions = <RM4 RM3>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
        // combo_ctrl_slash { // I + / -> Ctrl+/
        //     bindings = <&kp LC(FSLH)>;
        //     key-positions = <RM4 RB4>;
        //     layers = <WORKMAN_MAC>;
        //     require-prior-idle-ms = <COMBO_PRIOR_IDLE_MS>;
        //     timeout-ms = <COMBO_TIMEOUT_MS>;
        // };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Workman/Mac";
            bindings = <
//╭─────────┬────────┬──────┬──────┬──────┬──────┬──────╮                 ╭──────┬──────┬─────────┬────────┬────────┬─────────┬───────┬─────╮     ╭─────────╮
    &none     &none   &kp N1 &kp N2 &kp N3 &kp N4 &kp N5                   &kp N6 &kp N7  &kp N8   &kp N9    &kp N0   &none     &none  &none        &kp INS
//╰─────────┼────────┼──────┼──────┼──────┼──────┼──────┤                 ├──────┼──────┼─────────┼────────┼────────┼─────────┼───────┼─────┤     ├─────────┤
             CTL_ESC  &kp Q  &kp D  &kp R  &kp W  &kp B                    &kp J  &kp F   &kp U     &kp P   &kp SEMI  CTL_DEL   &none  &none       &kp PG_UP
//      ╭───┴────────┼─────┼───────┼──────┼──────┼──────┤  ╭──────────╮   ├──────┼──────┼─────────┼────────┼────────┼─────────┼───────┼─────╯     ├─────────┤
          GUI_TAB     CTL_a  GUI_s  ALT_h   SHF_t &kp G      &none         &kp Y  SHF_n   ALT_e     GUI_o    CTL_i    GUI_RET  &kp RET             &kp PG_DN
//╭─────┴────────────┼─────┼───────┼──────┼──────┼──────┤  ├──────────┤   ├──────┼──────┼─────────┼────────┼────────┼─────────┼───────╯ ╭────────╮╰─────────╯
    &scwc             &kp Z  &kp X  &kp M  &kp C  &kp V      &tdn_fun      &kp K  &kp L  &kp COMMA &kp DOT  &kp FSLH &kp RSHFT            &kp UP
//├─────────┬────────┼─────┼───────┴──────┼──────┴──────┼──┴─────┬────┴───┼──────┴──────┴─────────┼────────┼────────┼─────────╯╭────────┼────────┼──────────╮
   &kp LCTRL &kp LALT        &kp LGUI      &lt NAVL BSPC &tdn_fun &tdn_num  &lt SYML SPC           &tdn_nav &mo SYSL            &kp LEFT &kp DOWN  &kp RIGHT
//╰─────────┴────────╯     ╰──────────────┴─────────────┴────────┴────────┴───────────────────────┴────────┴────────╯          ╰────────┴────────┴──────────╯
            >;
        };

        symbol_layer {
            display-name = "Symbols";
            bindings = <
//╭──────┬──────┬─────────┬─────────┬─────────┬────────┬─────────╮           ╭─────────┬─────────┬─────────┬─────────┬─────────┬───────┬───────┬─────╮ ╭─────╮
   &none  &none   &kp F1    &kp F2    &kp F3    &kp F4   &kp F5                &kp F6    &kp F7    &kp F8   &kp F9    &kp F10   &kp F11 &kp F12 &none   &none
//╰──────┼──────┼─────────┼─────────┼─────────┼────────┼─────────┤           ├─────────┼─────────┼─────────┼─────────┼─────────┼───────┼───────┼─────┤ ├─────┤
          &trans &kp POUND &kp AMPS   &kp LBRC &kp LBKT &kp QMARK             &kp COLON &kp RBKT  &kp RBRC   &kp DQT  &kp DLLR  &trans   &none  &none   &none
//   ╭───┴──────┼─────────┼─────────┼─────────┼────────┼─────────┤  ╭─────╮  ├─────────┼─────────┼─────────┼─────────┼─────────┼───────┼───────┼─────╯ ├─────┤
       &trans    CTL_EXCL  GUI_STAR  ALT_MINUS SHF_LPAR  &kp LT      &none     &kp GT   SHF_RPAR  ALT_EQUAL  GUI_SQT  CTL_CARET &trans  &trans          &none
//╭──┴──────────┼─────────┼─────────┼─────────┼────────┼─────────┤  ├─────┤  ├─────────┼─────────┼─────────┼─────────┼─────────┼───────┼───────╯╭─────╮╰─────╯
    &trans       &kp TILDE &kp PRCNT  &kp PLUS &kp PIPE   &none      &none     &none    &kp UNDER  &kp AT   &kp GRAVE &kp BSLH   &none           &none
//├──────┬──────┼─────────┼─────────┴─────────┼────────┴─────────┼──┴──┬──┴──┼─────────┴─────────┴─────────┼─────────┼─────────┼───────╯╭───────┼─────┼─────╮
   &trans &trans            &kp LGUI            &kp DEL           &none &none  &none                         &none     &none              &none  &none &none
//╰──────┴──────╯         ╰───────────────────┴──────────────────┴─────┴─────┴─────────────────────────────┴─────────┴─────────╯        ╰───────┴─────┴─────╯
            >;
        };

#define C_VD C_VOLUME_DOWN
#define C_VU C_VOLUME_UP

        navigation_layer {
            display-name = "Navigation";
            bindings = <
//╭──────┬──────┬─────────┬────────┬────────┬─────────┬─────────────╮           ╭──────────┬─────────┬─────────┬────────────┬─────────┬──────┬──────┬─────╮ ╭──────────╮
   &none  &none   &none     &none    &none    &none     &none                     &none      &none     &none     &none        &none    &none   &none &none   &kp C_MUTE
//╰──────┼──────┼─────────┼────────┼────────┼─────────┼─────────────┤           ├──────────┼─────────┼─────────┼────────────┼─────────┼──────┼──────┼─────┤ ├──────────┤
          &trans  &none     &none    &none    &none    &kp _LOCK_SCR              &kp _CUT  &kp HOME   &kp UP    &kp END     &kp PG_UP &trans &none  &none    &kp C_VU
//   ╭───┴──────┼─────────┼────────┼────────┼─────────┼─────────────┤   ╭────╮  ├──────────┼─────────┼─────────┼────────────┼─────────┼──────┼──────┼─────╯ ├──────────┤
        &trans   &kp LCTRL &kp LGUI &kp LALT &kp LSHFT &kp C_SLEEP       TO_0    &kp _COPY  &kp LEFT  &kp DOWN   &kp RIGHT   &kp PG_DN &trans &trans          &kp C_VD
//╭──┴──────────┼─────────┼────────┼────────┼─────────┼─────────────┤   ├────┤  ├──────────┼─────────┼─────────┼────────────┼─────────┼──────┼──────╯╭─────╮╰──────────╯
    &trans        &none     &none    &none    &none    &kp C_POWER       TO_0    &kp _PASTE &kp _UNDO &kp _REDO &kp _SEL_ALL  &kp INS  &trans         &none
//├──────┬──────┼─────────┼────────┴────────┼─────────┴─────────────┼───┴──┬─┴──┼──────────┴─────────┴─────────┼────────────┼─────────┼──────╯╭──────┼─────┼─────╮
   &trans &trans            TO_0              &trans                 &trans TO_0  &trans                         TO_0         TO_0              &none &none &none
//╰──────┴──────╯         ╰─────────────────┴───────────────────────┴──────┴────┴──────────────────────────────┴────────────┴─────────╯       ╰──────┴─────┴─────╯
            >;
        };

        mouse_layer {
            display-name = "Mouse";
            bindings = <
//╭──────┬──────┬──────────────┬──────────────┬──────────────┬───────────────┬─────╮           ╭────────┬─────────┬────────┬────────┬─────────┬──────┬──────┬─────╮ ╭─────╮
   &none  &none   &none          &none          &none          &none          &none              &none    &none     &none    &none    &none    &none   &none &none   &none
//╰──────┼──────┼──────────────┼──────────────┼──────────────┼───────────────┼─────┤           ├────────┼─────────┼────────┼────────┼─────────┼──────┼──────┼─────┤ ├─────┤
          &trans &msc SCRL_DOWN &msc SCRL_LEFT  &mmv MOVE_UP  &msc SCRL_RIGHT &none              &none    &none     &none    &none    &none    &trans &none  &none   &none
//   ╭───┴──────┼──────────────┼──────────────┼──────────────┼───────────────┼─────┤   ╭────╮  ├────────┼─────────┼────────┼────────┼─────────┼──────┼──────┼─────╯ ├─────┤
       &trans     &msc SCRL_UP  &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &none     TO_0     &none   &kp RSHFT &kp RALT &kp RGUI &kp RCTRL &trans &trans         &none
//╭──┴──────────┼──────────────┼──────────────┼──────────────┼───────────────┼─────┤   ├────┤  ├────────┼─────────┼────────┼────────┼─────────┼──────┼──────╯╭─────╮╰─────╯
    &trans        &mkp MB1       &mkp MB1       &mkp MB2       &mkp MB3       &none     TO_0    &mkp MB1 &mkp MB2   &none    &none    &none    &trans         &none
//├──────┬──────┼──────────────┼──────────────┴──────────────┼───────────────┴─────┼───┴──┬─┴──┼────────┴─────────┴────────┼────────┼─────────┼──────╯╭──────┼─────┼─────╮
   &trans &trans                 TO_0                          &trans               &trans TO_0  &trans                      TO_0     TO_0             &none  &none &none
//╰──────┴──────╯              ╰─────────────────────────────┴─────────────────────┴──────┴────┴───────────────────────────┴────────┴─────────╯       ╰──────┴─────┴─────╯
            >;
        };

        numeric_layer {
            display-name = "Numbers";
            bindings = <
//╭──────┬──────┬─────────┬────────┬────────┬─────────┬──────╮           ╭─────────┬──────┬──────┬──────┬───────┬──────┬──────┬─────╮  ╭──────╮
   &none  &none   &kp N1    &kp N2   &kp N3   &kp N4   &kp N5              &kp N6   &kp N7 &kp N8 &kp N9 &kp N0  &none  &none  &none    &none
//╰──────┼──────┼─────────┼────────┼────────┼─────────┼──────┤           ├─────────┼──────┼──────┼──────┼───────┼──────┼──────┼─────┤  ├──────┤
          &trans  &kp N1    &kp N2   &kp N3   &kp N4   &kp N5              &kp N6   &kp N7 &kp N8 &kp N9 &kp N0  &trans &none  &none    &trans
//     ╭─┴──────┼─────────┼────────┼────────┼─────────┼──────┤   ╭────╮  ├─────────┼──────┼──────┼──────┼───────┼──────┼──────┼─────╯  ├──────┤
         &trans  &kp LCTRL &kp LGUI &kp LALT &kp LSHFT &none      TO_0     &none    &kp N4 &kp N5 &kp N6 &kp N0  &trans &trans          &trans
//╭────┴────────┼─────────┼────────┼────────┼─────────┼──────┤   ├────┤  ├─────────┼──────┼──────┼──────┼───────┼──────┼──────╯╭──────╮╰──────╯
    &trans       &none      &none    &none    &none    &none      TO_0    &kp COMMA &kp N1 &kp N2 &kp N3 &kp DOT &trans         &trans
//├──────┬──────┼─────────┼────────┴────────┼─────────┴──────┼───┴──┬─┴──┼─────────┴──────┴──────┼──────┼───────┼──────╯╭──────┼──────┼──────╮
   &trans &trans            TO_0              &trans          &trans TO_0  &trans                  TO_0   TO_0           &trans &trans &trans
//╰──────┴──────╯         ╰─────────────────┴────────────────┴──────┴────┴───────────────────────┴──────┴───────╯       ╰──────┴──────┴──────╯
            >;
        };

        function_layer {
            display-name = "Functions";
            bindings = <
//╭──────┬──────┬─────────┬────────┬────────┬─────────┬──────╮           ╭──────┬──────┬──────┬──────┬───────┬───────┬───────┬─────╮ ╭───────────────╮
   &none  &none   &kp F1    &kp F2   &kp F3   &kp F4   &kp F5             &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12 &none   &kp PRINTSCREEN
//╰──────┼──────┼─────────┼────────┼────────┼─────────┼──────┤           ├──────┼──────┼──────┼──────┼───────┼───────┼───────┼─────┤ ├───────────────┤
          &trans  &kp F1    &kp F2   &kp F3   &kp F4   &kp F5             &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &trans   &none  &none   &kp SCROLLLOCK
//     ╭─┴──────┼─────────┼────────┼────────┼─────────┼──────┤   ╭────╮  ├──────┼──────┼──────┼──────┼───────┼───────┼───────┼─────╯ ├───────────────┤
         &trans  &kp LCTRL &kp LGUI &kp LALT &kp LSHFT &none      TO_0    &none  &kp F4 &kp F5 &kp F6 &kp F11 &trans  &trans          &kp PAUSE_BREAK
//╭────┴────────┼─────────┼────────┼────────┼─────────┼──────┤   ├────┤  ├──────┼──────┼──────┼──────┼───────┼───────┼───────╯╭─────╮╰───────────────╯
    &trans        &none     &none    &none    &none    &none      TO_0    &none  &kp F1 &kp F2 &kp F3 &kp F12 &trans           &none
//├──────┬──────┼─────────┼────────┴────────┼─────────┴──────┼───┴──┬─┴──┼──────┴──────┴──────┼──────┼───────┼───────╯  ╭─────┼─────┼─────╮
   &trans &trans            TO_0              &trans          &trans TO_0  &trans               TO_0   TO_0              &none &none &none
//╰──────┴──────╯         ╰─────────────────┴────────────────┴──────┴────┴────────────────────┴──────┴───────╯          ╰─────┴─────┴─────╯
            >;
        };

        numpad_layer {
            display-name = "Numpad";
            bindings = <
//╭──────┬──────┬─────────┬────────┬────────┬─────────┬──────╮           ╭──────────┬─────────┬─────────┬─────────┬────────────┬──────┬──────┬─────╮ ╭─────╮
   &none  &none   &none     &none    &none    &none    &none               &none      &none     &none     &none     &none       &none  &none  &none   &none
//╰──────┼──────┼─────────┼────────┼────────┼─────────┼──────┤           ├──────────┼─────────┼─────────┼─────────┼────────────┼──────┼──────┼─────┤ ├─────┤
          &trans  &none     &none    &none    &none    &none              &kp KP_NUM &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_SLASH &trans &none  &none   &none
//     ╭─┴──────┼─────────┼────────┼────────┼─────────┼──────┤   ╭────╮  ├──────────┼─────────┼─────────┼─────────┼────────────┼──────┼──────┼─────╯ ├─────┤
         &trans  &kp LCTRL &kp LGUI &kp LALT &kp LSHFT &none      TO_0    &kp DOT    &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_EQUAL &trans &trans         &none
//╭────┴────────┼─────────┼────────┼────────┼─────────┼──────┤   ├────┤  ├──────────┼─────────┼─────────┼─────────┼────────────┼──────┼──────╯╭─────╮╰─────╯
    &trans        &none     &none    &none    &none    &none      TO_0    &kp KP_N0  &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_MINUS &trans         &none
//├──────┬──────┼─────────┼────────┴────────┼─────────┴──────┼───┴──┬─┴──┼──────────┴─────────┴─────────┼─────────┼────────────┼──────╯ ╭─────┼─────┼─────╮
   &trans &trans            TO_0              &trans          &trans TO_0  &trans                         TO_0      TO_0                 &none &none &none
//╰──────┴──────╯         ╰─────────────────┴────────────────┴──────┴────┴──────────────────────────────┴─────────┴────────────╯        ╰─────┴─────┴─────╯
            >;
        };

#define BSL BT_SEL

        settings_layer {
            display-name = "Settings";
            bindings = <
//╭──────┬────────┬──────────┬─────────┬─────────┬─────────┬─────────╮                         ╭─────┬─────┬─────┬─────┬─────┬─────┬─────┬──────────╮ ╭────────╮
   &none   &none   &bt BSL 0  &bt BSL 1 &bt BSL 2 &bt BSL 3 &bt BSL 4                           &none &none &none &none &none &none &none &bt BT_CLR    &none
//╰──────┼────────┼──────────┼─────────┼─────────┼─────────┼─────────┤                         ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼──────────┤ ├────────┤
           &none   &bt BSL 0  &bt BSL 1 &bt BSL 2 &bt BSL 3 &bt BSL 4                           &none &none &none &none &none &none &none &soft_off    &kp HOME
//     ╭─┴────────┼──────────┼─────────┼─────────┼─────────┼─────────┤      ╭───────────╮      ├─────┼─────┼─────┼─────┼─────┼─────┼─────┼──────────╯ ├────────┤
        &bl BL_TOG &bl BL_INC  &none     &none     &none     &none           &bootloader        &none &none &none &none &none &none &none              &kp END
//╭────┴──────────┼──────────┼─────────┼─────────┼─────────┼─────────┤      ├───────────┤      ├─────┼─────┼─────┼─────┼─────┼─────┼─────╯ ╭─────────╮╰────────╯
    &none          &bl BL_DEC  &none     &none     &none     &none           &sys_reset         &none &none &none &none &none &none         &kp PG_UP
//├──────┬────────┼──────────┼─────────┴─────────┼─────────┴─────────┼──────┴─────┬─────┴──────┼─────┴─────┴─────┼─────┼─────┼─────╯╭──────┼─────────┼───────╮
   &none   &none               &none               &none              &out OUT_BLE &out OUT_USB  &none            &none &none      &kp HOME &kp PG_DN &kp END
//╰──────┴────────╯          ╰───────────────────┴───────────────────┴────────────┴────────────┴─────────────────┴─────┴─────╯      ╰──────┴─────────┴───────╯
            >;
        };
    };
};
